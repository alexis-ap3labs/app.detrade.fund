name: Vault Action Trigger

on:
  workflow_dispatch:
    inputs:
      vault_id:
        description: 'Vault ID'
        required: true
        type: string
      action_type:
        description: 'Type of action (deposit or withdraw)'
        required: true
        type: choice
        options:
          - deposit
          - withdraw
      transaction_hash:
        description: 'Transaction hash'
        required: true
        type: string
      amount:
        description: 'Amount involved in the transaction'
        required: true
        type: string
      user_address:
        description: 'User wallet address'
        required: true
        type: string
      timestamp:
        description: 'Transaction timestamp'
        required: true
        type: string
      retry_count:
        description: 'Current retry count (internal use)'
        required: false
        type: string
        default: '0'
      original_timestamp:
        description: 'Original transaction timestamp (internal use)'
        required: false
        type: string

jobs:
  process-vault-action:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Process vault action
        run: |
          echo "Processing vault action:"
          echo "Vault ID: ${{ github.event.inputs.vault_id }}"
          echo "Action Type: ${{ github.event.inputs.action_type }}"
          echo "Transaction Hash: ${{ github.event.inputs.transaction_hash }}"
          echo "Amount: ${{ github.event.inputs.amount }}"
          echo "User Address: ${{ github.event.inputs.user_address }}"
          echo "Timestamp: ${{ github.event.inputs.timestamp }}"
          echo "Retry Count: ${{ github.event.inputs.retry_count }}"
          
          # Determine if this is a retry or the first run
          RETRY_COUNT="${{ github.event.inputs.retry_count }}"
          if [ "$RETRY_COUNT" = "0" ] || [ -z "$RETRY_COUNT" ]; then
            echo "üöÄ First run - will trigger subgraph sync and schedule retries"
          else
            echo "üîÑ Retry #$RETRY_COUNT - triggering subgraph sync"
          fi
          
      - name: Trigger subgraph sync
        run: |
          echo "Triggering subgraph sync for vault ${{ github.event.inputs.vault_id }}"
          
          # Map vault ID to workflow file
          VAULT_ID="${{ github.event.inputs.vault_id }}"
          case "$VAULT_ID" in
            "detrade-core-usdc"|"dev-detrade-core-usdc")
              WORKFLOW_FILE="sync-scheduler-usdc.yml"
              ;;
            "detrade-core-eth")
              WORKFLOW_FILE="sync-scheduler-eth.yml"
              ;;
            "detrade-core-eurc")
              WORKFLOW_FILE="sync-scheduler-eurc.yml"
              ;;
            *)
              echo "‚ùå Unknown vault ID: $VAULT_ID"
              exit 1
              ;;
          esac
          
          echo "üì° Triggering workflow: $WORKFLOW_FILE"
          
          # Trigger the subgraph sync workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/detradefund/subgraph/actions/workflows/$WORKFLOW_FILE/dispatches" \
            -d "{\"ref\": \"master\", \"inputs\": {\"manual_trigger\": \"true\", \"source\": \"vault-action-retry-${{ github.event.inputs.retry_count }}\"}}"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Subgraph sync triggered successfully"
          else
            echo "‚ùå Failed to trigger subgraph sync"
          fi
          
      - name: Schedule next retry
        if: github.event.inputs.retry_count != '5'
        run: |
          RETRY_COUNT="${{ github.event.inputs.retry_count }}"
          if [ -z "$RETRY_COUNT" ] || [ "$RETRY_COUNT" = "0" ]; then
            RETRY_COUNT=0
          fi
          
          NEXT_RETRY=$((RETRY_COUNT + 1))
          
          # Don't schedule if we've reached max retries
          if [ "$NEXT_RETRY" -gt 5 ]; then
            echo "üõë Maximum retries (5) reached, stopping"
            exit 0
          fi
          
          # Define delay for next retry
          case "$NEXT_RETRY" in
            "1") DELAY_MINUTES=3; DELAY_LABEL="3 minutes" ;;
            "2") DELAY_MINUTES=7; DELAY_LABEL="7 minutes (10 min total)" ;;
            "3") DELAY_MINUTES=20; DELAY_LABEL="20 minutes (30 min total)" ;;
            "4") DELAY_MINUTES=30; DELAY_LABEL="30 minutes (1 hour total)" ;;
            "5") DELAY_MINUTES=120; DELAY_LABEL="120 minutes (3 hours total)" ;;
            *) echo "‚ùå Invalid retry count: $NEXT_RETRY"; exit 1 ;;
          esac
          
          echo "‚è∞ Will schedule retry #$NEXT_RETRY in $DELAY_LABEL"
          
          # Original timestamp for tracking
          ORIGINAL_TIMESTAMP="${{ github.event.inputs.original_timestamp }}"
          if [ -z "$ORIGINAL_TIMESTAMP" ]; then
            ORIGINAL_TIMESTAMP="${{ github.event.inputs.timestamp }}"
          fi
          
          # Schedule the next retry with a simple sleep and immediate API call
          echo "üïê Starting $DELAY_MINUTES minute countdown for retry #$NEXT_RETRY..."
          
          # Wait in the background and then trigger
          (
            sleep $((DELAY_MINUTES * 60))
            echo "‚è∞ $DELAY_MINUTES minutes elapsed, triggering retry #$NEXT_RETRY now..."
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/workflows/vault-action-example.yml/dispatches" \
              -d "{
                \"ref\": \"${{ github.ref_name }}\",
                \"inputs\": {
                  \"vault_id\": \"${{ github.event.inputs.vault_id }}\",
                  \"action_type\": \"${{ github.event.inputs.action_type }}\",
                  \"transaction_hash\": \"${{ github.event.inputs.transaction_hash }}\",
                  \"amount\": \"${{ github.event.inputs.amount }}\",
                  \"user_address\": \"${{ github.event.inputs.user_address }}\",
                  \"timestamp\": \"${{ github.event.inputs.timestamp }}\",
                  \"retry_count\": \"$NEXT_RETRY\",
                  \"original_timestamp\": \"$ORIGINAL_TIMESTAMP\"
                }
              }"
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Retry #$NEXT_RETRY triggered successfully"
            else
              echo "‚ùå Failed to trigger retry #$NEXT_RETRY"
            fi
          ) &
          
          # Don't wait for the background process - action will complete quickly
          echo "üöÄ Action completing now. Retry #$NEXT_RETRY will auto-trigger in $DELAY_MINUTES minutes."
          echo "üìä You'll see a new separate GitHub Action run appear in $DELAY_MINUTES minutes."
          
      - name: Send notification
        if: github.event.inputs.action_type == 'deposit'
        run: |
          echo "Sending deposit notification for vault ${{ github.event.inputs.vault_id }}"
          # Add notification logic here
          
      - name: Update analytics
        run: |
          echo "Updating analytics for transaction ${{ github.event.inputs.transaction_hash }}"
          # Add analytics update logic here
          
      - name: Log action
        run: |
          echo "Action completed successfully"
          echo "Vault: ${{ github.event.inputs.vault_id }}"
          echo "Type: ${{ github.event.inputs.action_type }}"
          echo "Hash: ${{ github.event.inputs.transaction_hash }}"
          echo "Retry: ${{ github.event.inputs.retry_count }}"
          
          RETRY_COUNT="${{ github.event.inputs.retry_count }}"
          if [ "$RETRY_COUNT" = "0" ] || [ -z "$RETRY_COUNT" ]; then
            echo "üéâ First run completed - retries scheduled"
          else
            echo "üîÑ Retry #$RETRY_COUNT completed"
          fi 